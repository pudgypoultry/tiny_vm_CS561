//# Lark grammar for sums.  Note this is the "concrete syntax", which describes
//# a tree (the "parse tree") but not the tree we want (the "abstract syntax tree").
//#
//# Also of note:  Lark documentation says you can use # for comments, but as of 2023-09
//# it's a lie; you have to use //.   There are too many lies in the Lark documentation.
//#

// ================================================

?start: seq
    | assignment

assignment: VARIABLE [":"VARIABLE] "=" seq -> assign

seq: seq sum ";" -> seq_more
    | sum ";"    -> seq_one

product: product "*" number -> multiply
    | product "/" number -> divide
    | number

sum: sum "+" product -> plus
    | sum "-" product -> minus
    | product

// The real BNF portion of the grammar is all above.  What follows
// is the lexical structure, which is matched in a completely different
// way.  We'll begin by importing a standard Lark pattern for ignoring whitespace
%import common.WS
%ignore WS


number: NUMBER
NUMBER: /[0-9]+/
VARIABLE: /[a-zA-Z][a-zA-Z0-9]*/
TYPE: /"Int"/