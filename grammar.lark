//# Lark grammar for sums.  Note this is the "concrete syntax", which describes
//# a tree (the "parse tree") but not the tree we want (the "abstract syntax tree").
//#
//# Also of note:  Lark documentation says you can use # for comments, but as of 2023-09
//# it's a lie; you have to use //.   There are too many lies in the Lark documentation.
//#

// ================================================


// Using code shared from Slack and from quack_grammar.pdf as an example to build from

?start: program

program: (class)* (statement)*

class: class_signature class_body

class_signature: CLASS ident "(" formal_args ")" [ EXTENDS ident ]
formal_args: [ ident ":" ident ("," ident ":" ident)* ]

class_body: "{" (statement)* (method)* "}"

method: DEF ident "(" formal_args ")" [ ":" ident ] statement_block

statement_block: "{" (statement)* "}"

statement: IF r_expr statement_block (ELIF r_expr statement_block)* [ELSE statement_block]
    | WHILE r_expr statement_block
    | l_expr [":" ident] ASSIGNMENT r_expr ";"
    | r_expr ";"
    | RETURN [ r_expr ] ";"
    | typecase

typecase: TYPECASE r_expr "{" (type_alternative)* "}"

type_alternative: ident ":" ident statement_block

l_expr: ident
    | r_expr "." ident

r_expr: string_literal
    | l_expr
    | "(" r_expr ")"
    | r_expr EQ r_expr                      -> equality
    | r_expr LTEQ r_expr                    -> lessthan_equalto
    | r_expr LT r_expr                      -> lessthan
    | r_expr GTEQ r_expr                    -> greaterthan_equalto
    | r_expr GT r_expr                      -> greaterthan
    | r_expr AND r_expr                     -> bool_and
    | r_expr OR r_expr                      -> bool_or
    | r_expr PLUS r_expr
    | r_expr MINUS r_expr
    | r_expr MULTIPLY r_expr
    | r_expr DIVIDE r_expr
    | NOT r_expr                            -> bool_not
    | r_expr "." ident "(" actual_args ")"  -> function_call
    | ident "(" actual_args ")"             -> field_reference
    | sum
    | MINUS sum                         -> times_negative_one


product: product MULTIPLY int_literal       -> multiply
    | product DIVIDE int_literal            -> divide
    | int_literal

sum: sum PLUS product -> plus
    | sum MINUS product -> minus
    | product

actual_args: [ r_expr (","  r_expr)*]


string_literal: STRING
int_literal: NUMBER
ident: IDENT

NUMBER: /[0-9]+/
STRING: /"(.)+"/
IDENT: /[a-zA-Z_][a-zA-Z0-9_]*/

PLUS: "+"
MINUS: "-"
MULTIPLY: "*"
DIVIDE: "/"

ASSIGNMENT: "="
EQ: "=="
LTEQ: "<="
LT: "<"
GTEQ: ">="
GT: ">"

AND: "and"
OR: "or"
NOT: "not"

IF: "if"
ELIF: "elif"
ELSE: "else"

WHILE: "while"

DEF: "def"
RETURN: "return"

TYPECASE: "typecase"
EXTENDS: "extends"
CLASS: "class"

%import common.WS
%ignore WS
